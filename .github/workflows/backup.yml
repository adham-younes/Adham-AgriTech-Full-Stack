name: Database Backup

on:
  schedule:
    - cron: '0 2 * * *' # Run daily at 2 AM
  workflow_dispatch: # Allow manual trigger

jobs:
  backup:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create backup directory
      run: mkdir -p backups
      
    - name: Backup Supabase database
      run: |
        # This would require Supabase CLI and proper credentials
        # For now, we'll create a placeholder
        echo "Backup would be created here" > backups/supabase-backup-$(date +%Y%m%d).sql
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      continue-on-error: true
      
    - name: Backup environment variables
      run: |
        # Create a backup of environment variables (without secrets)
        echo "# Environment Variables Backup - $(date)" > backups/env-backup-$(date +%Y%m%d).txt
        echo "NODE_ENV=$NODE_ENV" >> backups/env-backup-$(date +%Y%m%d).txt
        echo "NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL" >> backups/env-backup-$(date +%Y%m%d).txt
      env:
        NODE_ENV: ${{ env.NODE_ENV }}
        NEXT_PUBLIC_APP_URL: ${{ env.NEXT_PUBLIC_APP_URL }}
        
    - name: Create backup archive
      run: |
        tar -czf backup-$(date +%Y%m%d).tar.gz backups/
        
    - name: Upload backup to GitHub Releases
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: backup-$(date +%Y%m%d).tar.gz
        asset_name: backup-$(date +%Y%m%d).tar.gz
        asset_content_type: application/gzip
      continue-on-error: true
      
    - name: Upload backup to external storage
      run: |
        # This would upload to AWS S3, Google Cloud Storage, etc.
        echo "Backup would be uploaded to external storage"
      continue-on-error: true
      
    - name: Cleanup old backups
      run: |
        # Keep only last 7 days of backups
        find backups/ -name "*.sql" -mtime +7 -delete
        find backups/ -name "*.txt" -mtime +7 -delete
        find . -name "backup-*.tar.gz" -mtime +7 -delete